# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## סיכום בדיקות ותיקונים - 16/02/2024

### בעיות שזוהו ותוקנו
1. טיפול בסוגי נתונים:
   - [X] טיפול ב-SecretStr בקונפיגורציה
   - [X] המרת טוקן טלגרם למחרוזת רגילה
   - [X] שימוש ב-get_secret_value() לקבלת ערכים מוצפנים

2. אבטחה ואימות:
   - [X] שימוש ב-SecretStr לאחסון מאובטח של טוקנים
   - [X] הגדרת verify=False בסביבת פיתוח
   - [X] תיעוד והערות לגבי אימות בפרודקשן

3. שיפורי קוד:
   - [X] הוספת לוגים מפורטים בעברית
   - [X] שיפור הטיפול בשגיאות
   - [X] ניקוי קוד מיותר

### שינויים בקבצים
1. `src/bot.py`:
   - עדכון שימוש בטוקן טלגרם עם get_secret_value()
   - שיפור מערכת הלוגים
   - הוספת הודעות שגיאה בעברית

2. `src/core/config.py`:
   - הגדרת TELEGRAM_BOT_TOKEN כ-SecretStr
   - הגדרת משתני סביבה רגישים כ-SecretStr

3. `src/resources/messages/he/messages.yaml`:
   - הוספת הודעות מערכת בעברית
   - שיפור פורמט ההודעות
   - הוספת אימוג'ים להודעות

### לקחים ומסקנות
1. טיפול בסוגי נתונים:
   - תמיד להשתמש ב-SecretStr למידע רגיש
   - לזכור להמיר SecretStr למחרוזת רגילה בעת השימוש
   - לטפל בהמרות נתונים באופן מפורש

2. אבטחה:
   - שימוש ב-SecretStr לאחסון טוקנים
   - הקפדה על אימות SSL בפרודקשן
   - תיעוד החלטות אבטחה

3. לוגים ושגיאות:
   - שימוש בלוגים בעברית לנוחות המשתמש
   - הוספת מידע מפורט בלוגים
   - טיפול נכון בשגיאות קריטיות

### משימות להמשך
[ ] הוספת אימות SSL בסביבת פרודקשן
[ ] שיפור מערכת הלוגים
[ ] הוספת בדיקות נוספות
[ ] שיפור הטיפול בשגיאות
[ ] תיעוד API מפורט

## מצב נוכחי של הפרויקט
[X] תשתית בסיסית
[X] ניהול תצורה
[X] טיפול בשגיאות בסיסי
[X] מערכת בדיקות ראשונית
[X] בוט טלגרם פעיל
[ ] מוכנות לפרודקשן

## Environment Setup
- Python 3.11
- FastAPI 0.95.2
- Pydantic 1.10.7
- python-telegram-bot 20.7
- WooCommerce 3.0.0

## Dependencies
- כל הספריות מוגדרות ב-requirements.txt
- גרסאות ספציפיות לכל חבילה
- הגדרת סביבת venv חובה

## Security
- שימוש ב-SecretStr לאחסון מידע רגיש
- הגדרות SSL לפי סביבה
- טיפול נכון בטוקנים ומפתחות

## Logging
- לוגים בעברית
- רמות לוג שונות
- תיעוד שגיאות מפורט

## Error Handling
- הודעות שגיאה ידידותיות למשתמש
- לוגים מפורטים למפתחים
- טיפול בשגיאות קריטיות

## Testing
- בדיקות יחידה
- בדיקות אינטגרציה
- בדיקות קצה לקצה

## Documentation
- תיעוד בעברית
- הערות בקוד
- README מפורט

# Scratchpad

## Current Task: פיתוח מערכת ניהול משלוחים ותשלומים

### שלב 1: ניהול משלוחים ✓
[X] הגדרת אזורי משלוח:
  - create_shipping_zone - יצירת אזור משלוח חדש
  - update_shipping_zone - עדכון אזור משלוח
  - delete_shipping_zone - מחיקת אזור משלוח
  - get_shipping_zones - קבלת רשימת אזורי משלוח

[X] הגדרת שיטות משלוח:
  - add_shipping_method - הוספת שיטת משלוח לאזור
  - update_shipping_method - עדכון שיטת משלוח
  - delete_shipping_method - מחיקת שיטת משלוח
  - set_shipping_price - הגדרת מחיר משלוח

[X] אינטגרציה עם חברות שליחויות:
  - integrate_shipping_company - חיבור לחברת שליחויות
  - get_shipping_quote - קבלת הצעת מחיר למשלוח
  - create_shipping_label - יצירת תווית משלוח
  - track_shipment - מעקב אחר משלוח

### שלב 2: ניהול לקוחות ✓
[X] ניהול פרטי לקוח:
  - create_customer - יצירת לקוח חדש
  - update_customer - עדכון פרטי לקוח
  - delete_customer - מחיקת לקוח
  - get_customer_details - קבלת פרטי לקוח

[X] היסטוריית הזמנות:
  - get_customer_orders - קבלת היסטוריית הזמנות
  - get_order_details - קבלת פרטי הזמנה ספציפית

[X] מועדון לקוחות:
  - manage_customer_points - ניהול נקודות מועדון
  - add_customer_note - הוספת הערות ללקוח
  - get_customer_points - קבלת מצב נקודות

[X] ניהול הרשאות:
  - manage_customer_role - ניהול תפקידים
  - get_customer_roles - קבלת הרשאות נוכחיות

### שלב 3: ניהול תשלומים ✓
[X] שיטות תשלום:
  - add_payment_method - הוספת שיטת תשלום
  - update_payment_method - עדכון שיטת תשלום
  - delete_payment_method - מחיקת שיטת תשלום
  - get_payment_methods - קבלת רשימת שיטות תשלום

[X] ניהול עסקאות:
  - process_payment - עיבוד תשלום
  - refund_payment - ביצוע החזר כספי
  - split_payment - פיצול תשלום
  - get_transaction_history - קבלת היסטוריית עסקאות

[X] ניהול מטבעות:
  - add_currency - הוספת מטבע
  - update_exchange_rate - עדכון שער חליפין
  - get_currency_rates - קבלת שערי מטבעות

### שלב 4: הרחבת ממשק המשתמש ✓
[X] פקודות ניהול משלוחים:
  - הגדרת אזור משלוח חדש
  - עדכון מחירי משלוח
  - הדפסת תווית משלוח
  - מעקב אחר משלוח

[X] פקודות ניהול תשלומים:
  - הוספת שיטת תשלום
  - עדכון שערי מטבע
  - צפייה בהיסטוריית עסקאות
  - ביצוע החזר כספי

### שלב 5: בדיקות ותיעוד ✓
[X] בדיקות:
  - בדיקות יחידה למודול משלוחים
  - בדיקות יחידה למודול תשלומים
  - בדיקות אינטגרציה
  - בדיקות קצה לקצה

[X] תיעוד:
  - תיעוד API
  - מדריך למשתמש
  - הוראות התקנה

## Notes
- לוודא תאימות עם חברות שליחויות נפוצות בישראל
- לוודא עמידה בתקני אבטחה לעיבוד תשלומים
- לשמור על גמישות במערכת לתמיכה בשיטות תשלום עתידיות
- לתעד היטב את תהליכי האינטגרציה

// ... existing code ...