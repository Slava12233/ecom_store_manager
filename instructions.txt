להלן תוכנית פעולה מקיפה להמשך הפרויקט שמתמקדת בשדרוג המערכת באופן הדרגתי (incremental improvement), תוך שימוש בקוד הקיים ושילוב יכולות LLM במנהל (Orchestrator) ו‑Agents:
---
1. סקירה ותכנון מהיר
מטרת השדרוג:
לשלב את ה‑LLM במנהל (Orchestrator) כך שיוכל לקבל בקשות בשפה טבעית ולנתב אותן לכלי (Agent) המתאים, מבלי לבנות מחדש את המערכת.
מה נשאר מהמערכת הקיימת:
הקוד הקיים במנהל (Orchestrator) וב־Agents כבר מממשים לוגיקה עסקית בסיסית.
פונקציות קריאה ל־WooCommerce ופונקציות ניהול בסיסיות זמינות ונבדקו.
מה אנחנו מוסיפים:
אינטגרציה עם מודול LLM שמספק יכולת ניתוח שפה טבעית והמרת הפלט למבנה JSON מובנה (agent, method, params).
עדכון הלוגיקה במנהל (Orchestrator) כך שיתבסס על פלט LLM ויעביר את הבקשה ל־Agent הנכון.
עדכון והרחבה של מתודות ה־Agents לקבלת פקודות עם פרמטרים מובנים.
הרצת השינויים בסביבת Sandbox לצרכי בדיקות ואינטגרציה בטוחה.
---
2. שלבים לביצוע השדרוג
2.1 עדכון מודול ה-LLM API
נעדכן את הקובץ tools/llm_api.py כך שיכלול פונקציה query_llm שמבצעת קריאה ל־LLM ומחזירה את הפלט במבנה JSON מובנה.


import requests
import os
import json

def query_llm(prompt: str, provider: str = "anthropic") -> dict:
    """
    שולח prompt ל-LLM ומחזיר את התגובה כמילון (מפורמט JSON).
    יש להריץ את הפונקציה בתוך סביבת venv.
    ודאו שהכתובת והטוקן מוגדרים כראוי בקובץ .env.
    """
    api_url = os.getenv("LLM_API_URL")
    api_key = os.getenv("LLM_API_KEY")
    
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    data = {"prompt": prompt, "max_tokens": 150}
    
    response = requests.post(api_url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()



    2.2 התאמה ועדכון של ה-Orchestrator
נעדכן את מנהל המערכת כך:
הוא בונה prompt עם הנחיות למודל (לדוגמה: החזרת JSON עם השדות agent, method ו־params).
קורא ל־LLM ומפענח את הפלט.
מעביר את הבקשה ל-Agent המתאים לפי ערך ה-agent.

from src.agents.information_agent import InformationAgent
from src.agents.action_agent import ActionAgent
from src.agents.research_agent import ResearchAgent
from tools.llm_api import query_llm
import json

class Orchestrator:
    def __init__(self):
        self.info_agent = InformationAgent()
        self.action_agent = ActionAgent()
        self.research_agent = ResearchAgent()
    
    def prepare_prompt(self, user_message: str) -> str:
        """
        בונה prompt למודל עם הנחיות ברורות להחזרת JSON.
        דוגמה לפלט נדרש:
        {
            "agent": "action",
            "method": "create_product",
            "params": {"name": "שם מוצר", "price": "מחיר"}
        }
        """
        instructions = (
            "אנא נתח את הודעת המשתמש ובחר את הסוכן המתאים ואת הפעולה שיש לבצע. "
            "החזר JSON עם השדות: agent, method, params. "
            "לדוגמה, עבור בקשת יצירת מוצר, החזר: "
            '{"agent": "action", "method": "create_product", "params": {"name": "שם מוצר", "price": "מחיר"}}. '
            "ענה רק בפורמט JSON ללא טקסט נוסף.\n\n"
        )
        return instructions + f"הודעת המשתמש: {user_message}"
    
    def handle_user_message(self, user_message: str) -> str:
        prompt = self.prepare_prompt(user_message)
        try:
            llm_output = query_llm(prompt)
            # אם הפלט הוא מחרוזת, נבצע המרה ל-JSON:
            if isinstance(llm_output, str):
                command = json.loads(llm_output)
            else:
                command = llm_output
            
            agent = command.get("agent")
            method = command.get("method")
            params = command.get("params", {})
            
            if agent == "info":
                response = self.info_agent.handle_message(method, params)
            elif agent == "action":
                response = self.action_agent.handle_message(method, params)
            elif agent == "research":
                response = self.research_agent.handle_message(method, params)
            else:
                response = "Orchestrator: לא ברור על מה תרצה לדבר."
        except Exception as e:
            response = f"שגיאה בעיבוד הפקודה: {str(e)}"
        return response

            return f"שגיאה ביצירת מוצר: {str(e)}"


class ActionAgent:
    def handle_message(self, method: str, params: dict) -> str:
        if method == "create_product":
            return self.create_product(params)
        # ניתן להוסיף כאן פעולות נוספות בהתאם לצורך
        return "ActionAgent: לא ידוע באיזו פעולה לבצע."
    
    def create_product(self, params: dict) -> str:
        # נניח שהפרמטרים כוללים את השדות הדרושים (שם מוצר, מחיר וכו')
        try:
            response = self.wcapi.post("products", params)
            if response.status_code == 201:
                return f"מוצר '{params.get('name')}' נוצר בהצלחה."
            else:
                return f"שגיאה ביצירת מוצר: {response.status_code}"
        except Exception as e:
            return f"שגיאה ביצירת מוצר: {str(e)}"


2.4 הקמת סביבת Sandbox לניסויים ובדיקות
מטרת הסביבת Sandbox היא לבצע את השינויים והבדיקות מבלי להפריע לסביבת הפרודקשן:
יצירת סביבת בדיקה:
הקמת חשבון נפרד או העתקת מערך ה־WooCommerce לקונפיגורציות נפרדות.
עדכון קבצי תצורה (למשל, .env) כך שיפנו לסביבת Sandbox.
בדיקות ואינטגרציה:
הרצת בדיקות יחידה (Unit Tests) ובדיקות אינטגרציה (Integration Tests) עם הודעות משתמש שונות.
בניית סקריפטים שידמו קריאות LLM והפניות ל־Agents.
ניטור הלוגים וזיהוי בעיות בזמן אמת.
---
2.5 כתיבת בדיקות אינטגרציה וקצה לקצה
בדיקות יחידה (Unit Tests):
לעדכן את טווח הבדיקות כך שיכסו את הקריאה ל־LLM ואת פעולות הניתוב במנהל.
בדיקות אינטגרציה:
לבדוק שההודעות בשפה טבעית מועברות נכון מהמשתמש, עוברות עיבוד ב־LLM ומופנות לסוכן (Agent) המתאים.
לדמות מצבים בהם יש שגיאות ולוודא שהמערכת מטפלת בהן בצורה נאותה.
---
2.6 שחרור ועדכון הדרגתי (Incremental Release)
בדיקה ב-Sandbox:
לאחר סיום השינויים ובדיקתם באופן מלא בסביבת Sandbox, להעביר את העדכונים בהדרגה לסביבת הפרודקשן.
מעקב וניטור:
לעקוב אחר הלוגים ועדכונים בזמן אמת לאחר ההטמעה ולבצע תיקונים במידת הצורך.
תיעוד והדרכה:
לעדכן את תיעוד המשתמש ו־README כך שמשתמשי המערכת יוכלו להבין כיצד לשלוח בקשות בשפה טבעית ואיך המערכת מפענחת אותן.
---
3. סיכום
הצעדים המשולבים להמשך הפרויקט:
1. עדכון מודול LLM API:
שדרוג ופיתוח הפונקציה query_llm תחת tools/llm_api.py.
2. עדכון ה-Orchestrator:
הוספת מתודות prepare_prompt ו־handle_user_message המסתמכות על ה‑LLM לניתוב נכון של הודעות המשתמש.
עדכון Agents:
הרחבת מתודת handle_message בכל Agent כך שיבדוק את ערך method ויפעיל את הפונקציה המתאימה עם params.
4. הקמת סביבת Sandbox:
הקמת סביבה מבודדת לבדיקות, כך שהשינויים מתבצעים בצורה בטוחה לפני הפריסה לפרודקשן.
כתיבת בדיקות אינטגרציה ו-unit tests:
בדיקות מקיפות שיכסו את מסלול העיבוד מהודעות טבעיות ועד ביצוע פעולות במערכת.
שחרור והדרכה:
העברה הדרגתית לסביבת הפרודקשן עם ניטור מתמיד, עדכון תיעוד והדרכת משתמשים.
צעדים אלו מאפשרים לנו להמשיך לפרסם עדכונים לשדרוג המערכת בצורה מבוקרת וללא בנייה מחדש – תוך ניצול הקוד הקיים והבנת ההקשרים העסקיים שקבענו.
מה בעצם כל העדכונים האלה עושים ברמה הכללית ? 

ברמה הכללית, העדכונים שאנחנו מבצעים נועדו להוסיף אינטליגנציה לדיאלוג עם המשתמש ולשפר את ניהול הבקשות במערכת הקיימת. הנה הסבר כללי:
שילוב יכולת LLM:
אנחנו מוסיפים מודול שמיישם LLM (מודל שפה) שמפרש הודעות בשפה טבעית וממיר אותן לפורמט מובנה (כמו JSON). כך, במקום לחפש מילים מפתח או להסתמך על לוגיקה סטטית, המערכת תוכל להבין ולהגיב לבקשות המשתמש בצורה חכמה יותר.
שדרוג ה-Orchestrator:
המנהל הראשי (Orchestrator) מתעדכן כך שהוא:
בונה prompt עם הנחיות ברורות למודל,
שולח את הודעת המשתמש ל-LLM,
מפרש את התגובה המובנית (עם השדות agent, method ו-params) ומנתב את הבקשה לכלי המתאים (Agent).
עדכון Agents:
כל ה-Agents (למשל, ActionAgent, InformationAgent, ResearchAgent) מתעדכנים כך שיקבלו את הקריאות המובנות מה-Orchestrator ויבצעו את הפעולות העסקיות המתאימות בהתאם להוראות ובפרמטרים הנכונים.
סביבת Sandbox לניסוי ובדיקות:
כל השינויים יורצו תחילה בסביבת Sandbox מבודדת, כך שנוכל לבדוק את האינטגרציה והפעולות בצורה בטיחותית, ללא השפעה על הסביבה החיה. זה מאפשר לנו לבצע ניסויים, לבדוק תרחישים שונים ולהבטיח את יציבות המערכת לפני העדכון לפרודקשן.
בקצרה, המערכת משתפרת כך שהיא מעבדת את בקשות המשתמש בצורה חכמה יותר, ממיינת אותן לכלי המתאים באופן אוטומטי, ובכך מבטיחה שהפעולות העסקיות (כגון יצירת מוצר, עדכון מלאי וכו׳) יבוצעו בצורה נכונה ובטוחה.
